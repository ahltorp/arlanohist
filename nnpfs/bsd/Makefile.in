# $Id: Makefile.in,v 1.76 2007/03/27 13:24:25 tol Exp $

SHELL		= /bin/sh

srcdir		= @srcdir@
top_builddir	= ../..
VPATH		= @srcdir@

CC	= @CC@
LD		= @KERNEL_LD@
SYMORDER	= @SYMORDER@
MODLOAD		= @MODLOAD@
MODSTAT		= modstat
MODUNLOAD	= @MODUNLOAD@
MKDIR		= mkdir
RMDIR		= rmdir
LN_S		= @LN_S@
RM		= rm

INSTALL		= @INSTALL@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_LKM_PROGRAM = @INSTALL_PROGRAM@
INSTALL_DATA	= @INSTALL_DATA@
MKINSTALLDIRS 	= @top_srcdir@/mkinstalldirs

prefix 		= @prefix@
exec_prefix 	= @exec_prefix@
libdir 		= @libdir@
libexecdir 	= @libexecdir@
bindir 		= @bindir@
lkmdir 		= @bindir@
transform	= @program_transform_name@
EXECSUFFIX	= @EXECSUFFIX@
VARDB		= /var/db

NNPFS_BIN		= $(MODULE)

INCDEFS		= -I. -I$(srcdir) \
		  -I../../include -I$(srcdir)/../../include \
		  -I$(srcdir)/../include

DEFS		   = @DEFS@ $(INCDEFS) -DNNPFS_DEBUG
CFLAGS = @CFLAGS@ @KERNEL_CFLAGS@ @KERNEL_CPPFLAGS@ -Wno-unused @BSD_WERROR@

SYS		= @SYS@

SUBDIRS		= bin

MODULE= @MODULE@

MODULE_SRCS	= \
		  nnpfs_blocks.c		\
		  nnpfs_deb.c			\
		  nnpfs_message.c		\
		  nnpfs_common.c		\
		  nnpfs_node.c			\
		  @NNPFS_SRCS@

 MODULE_HDRS	= \
		  $(srcdir)/../include/nnpfs/nnpfs_attr.h		\
		  $(srcdir)/../include/nnpfs/nnpfs_blocks.h		\
		  $(srcdir)/../include/nnpfs/nnpfs_debug.h		\
		  $(srcdir)/../include/nnpfs/nnpfs_global.h		\
		  $(srcdir)/../include/nnpfs/nnpfs_message.h		\
		  $(srcdir)/../include/nnpfs/nnpfs_queue.h		\
		  nnpfs/nnpfs.h			\
		  nnpfs/nnpfs_deb.h		\
		  nnpfs/nnpfs_dev.h		\
		  nnpfs/nnpfs_fs.h		\
		  nnpfs/nnpfs_locl.h		\
		  nnpfs/nnpfs_msg_locl.h	\
		  nnpfs/nnpfs_node.h		\
		  nnpfs/nnpfs_common.h		\
		  nnpfs/nnpfs_syscalls.h	\
		  nnpfs/nnpfs_vfsops.h		\
		  nnpfs/nnpfs_vfsops-bsd.h	\
		  nnpfs/nnpfs_vnodeops.h	\
		  nnpfs/nnpfs_wrap.h

MODULE_OBJS	= $(MODULE_SRCS:.c=.o)

all: $(MODULE)

$(MODULE_OBJS): nnpfs_vopdefs.h @VNODE_IF_H@ $(MODULE_HDRS)

# For MacOS universal binaries:
# Do some magic to check cputypes in our object files, and create our
# module with the same type(s)

@MACOSX_TRUE@nnpfs_mod.o: $(MODULE_OBJS)
@MACOSX_TRUE@	rm -f $@* ; \
@MACOSX_TRUE@	for cpu in `lipo -info nnpfs_common.o| cut -d':' -f 3` ; do \
@MACOSX_TRUE@	    $(LD) -arch $$cpu -r -o $@.$$cpu $(MODULE_OBJS) \
@MACOSX_TRUE@	; done ; \
@MACOSX_TRUE@	lipo -create $@.* -output $@

# ...and the usual old way for other OS:es
@MACOSX_FALSE@nnpfs_mod.o: $(MODULE_OBJS)
@MACOSX_FALSE@	$(LD) -r -o tmp.o $(MODULE_OBJS)
@MACOSX_FALSE@	echo _nnpfs_mod > symb.tmp
@MACOSX_FALSE@	$(SYMORDER) -c symb.tmp tmp.o
@MACOSX_FALSE@	rm -f symb.tmp
@MACOSX_FALSE@	mv -f tmp.o nnpfs_mod.o

nnpfs.mod: $(MODULE_OBJS)
	$(LD) -r -dc -o tmp.o $(MODULE_OBJS)
	mv -f tmp.o nnpfs.mod

@DFLY_FALSE@@FBSD5_FALSE@FBSD_LINK_HACK=\
@DFLY_FALSE@@FBSD5_FALSE@	gensetdefs $(MODULE_OBJS); \
@DFLY_FALSE@@FBSD5_FALSE@	$(CC) $(CFLAGS) -c setdef0.c; \
@DFLY_FALSE@@FBSD5_FALSE@	$(CC) $(CFLAGS) -c setdef1.c; \
@DFLY_FALSE@@FBSD5_FALSE@	pre=setdef0.o post=setdef1.o ;
@DFLY_TRUE@@FBSD5_FALSE@FBSD_LINK_HACK=
@FBSD5_TRUE@@FBSD5_FALSE@FBSD_LINK_HACK=

nnpfs.ko:	$(MODULE_OBJS)
	if test `objformat` = "elf"; then \
	  $(FBSD_LINK_HACK) \
	  $(LD) -Bshareable -o $@ $${pre} $(MODULE_OBJS) $${post}; \
	else \
	  $(LD) -Bshareable -o $@ $(MODULE_OBJS); \
	fi

load:	$(MODULE)
	if test $(MODULE) = "nnpfs.ko"; then \
	  kldload -v ./$(MODULE); \
	else \
	  rm -f $(VARDB)/nnpfs_sym; \
	$(MODLOAD) -e nnpfs_mod -o $(VARDB)/nnpfs_sym -p $(srcdir)/bin/nnpfs_makedev nnpfs_mod.o || $(MODLOAD) -o $(VARDB)/nnpfs_sym nnpfs_mod.o; \
	modstat > $(VARDB)/nnpfs_modstat 2>&1; \
	fi

unload:
	if test $(MODULE) = "nnpfs.ko"; then \
	  kldunload -v -n $(MODULE); \
	else \
	  $(MODUNLOAD) -n nnpfs_mod; \
	fi

mount:
		./bin/mount_nnpfs /dev/nnpfs0 /afs

umount:
		./bin/umount_nnpfs /afs

install-native:
	for i in lkm subsys modules; do \
		if test -d $(DESTDIR)/$$i; then \
			$(INSTALL_PROGRAM) $(MODULE) $(DESTDIR)/$$i/$(MODULE); \
		fi; \
	done

KEXTNAME=nnpfs.kext
KEXTDIR=$(DESTDIR)$(lkmdir)/$(KEXTNAME)

@MACOSX_TRUE@INSTALL_LKM=install-macosx
@MACOSX_FALSE@INSTALL_LKM=install-bsd

install-macosx:
	$(MKINSTALLDIRS) $(KEXTDIR)/Contents/MacOS
	$(INSTALL_PROGRAM) $(NNPFS_BIN) $(KEXTDIR)/Contents/MacOS/nnpfs
	$(INSTALL_DATA) Info.plist $(KEXTDIR)/Contents

install-bsd:
	$(MKINSTALLDIRS) $(DESTDIR)$(lkmdir)
	LKM_BIN='$(NNPFS_BIN)'; for x in $$LKM_BIN; do \
		$(INSTALL_LKM_PROGRAM) $$x $(DESTDIR)$(lkmdir)/$$x; \
	done

install: all $(INSTALL_LKM)
	cd bin && $(MAKE) $(MFLAGS) install

uninstall-native:
	for i in lkm subsys modules; do \
		if test -d $(DESTDIR)/$$i; then \
			rm -f $(DESTDIR)/$$i/$(MODULE); \
		fi; \
	done


uninstall:
	LKM_BIN='$(NNPFS_BIN)'; for x in $$LKM_BIN; do \
		rm -f $(DESTDIR)$(lkmdir)/$$x; \
	done
	cd bin && $(MAKE) $(MFLAGS) uninstall


nnpfs_vopdefs.h: stamp-nnpfs_vopdefs.h
stamp-nnpfs_vopdefs.h: @VNODE_IF_H@
	for i in $(SYS)/sys/vnode_if.h /usr/include/sys/vnode_if.h vnode_if.h; do \
	  if test -r $$i; then \
	    awk '/^struct vop_[a-z]*_args/ { vop=substr($$2,5,length($$2)-9); printf("#define HAVE_VOP_%s 1\n", toupper(vop)); printf("NNPFS_VOP_DEF(%s);\n", vop); }' $$i > nnpfs_vopdefs.h; \
	    break; \
	  fi; \
	done
	-$(MKDIR) nnpfs
	test -d nnpfs && ( test -f nnpfs/nnpfs_vopdefs.h || $(LN_S) ../nnpfs_vopdefs.h nnpfs/nnpfs_vopdefs.h )
	touch stamp-nnpfs_vopdefs.h

# try to create vnode_if.h (we only depend on this if this file is actually
# needed)

vnode_if.h: $(SYS)/kern/vnode_if.src
	-$(MKDIR) ../sys
	if test -f $(SYS)/kern/vnode_if.pl; then \
	  perl $(SYS)/kern/vnode_if.pl -h $(SYS)/kern/vnode_if.src; \
	elif test -f $(SYS)/kern/vnode_if.sh; then \
	  $(SHELL) $(SYS)/kern/vnode_if.sh $(SYS)/kern/vnode_if.src; \
	  if ! test -f vnode_if.h; then \
	    if test -f ../sys/vnode_if.h ;then \
	      ln -s ../sys/vnode_if.h vnode_if.h; \
            else \
              echo "unable to create vnode_if.h"; exit 1; \
            fi; \
          fi; \
	elif test -f $(SYS)/tools/vnode_if.awk ; then \
	  awk -f $(SYS)/tools/vnode_if.awk $(SYS)/kern/vnode_if.src -h ; \
	else \
	  echo "cannot find any vnode_if script"; exit 1; \
	fi

.c.o:
	$(CC) -c $(CPPFLAGS) $(DEFS) $(CFLAGS) $<

Makefile: Makefile.in ../../config.status
	cd ../.. ; CONFIG_FILES=nnpfs/bsd/Makefile CONFIG_HEADERS= $(SHELL) config.status

clean: doclean

# This is a workaround so subdirs can be made. 
# You can't have two command-sets for one target
doclean:
	$(RM) -f $(MODULE) nnpfs_mod.o.* *.o *~ vnode_if.h vnode_if.c nnpfs_vopdefs.h nnpfs/nnpfs_vopdefs.h stamp-nnpfs_vopdefs.h

mostlyclean: clean

distclean: clean

realclean: distclean

all clean mostlyclean distclean realclean:
	SUBDIRS='$(SUBDIRS)'; \
	for i in $$SUBDIRS; \
	do (cd $$i && $(MAKE) $(MFLAGS) $@); done

.PHONY: all load clean mostlyclean distclean realclean install uninstall
